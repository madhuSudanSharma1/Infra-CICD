name: CI
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Run TFLint
        id: tflint
        run: tflint --format=compact
        working-directory: ./infrastructure

      - name: Comment TFLint Results
        uses: GetTerminus/terraform-pr-commenter@v1
        if: failure() && steps.tflint.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        with:
          commenter_type: "tflint"
          commenter_input: ${{ steps.tflint.outputs.stdout }}
          commenter_exitcode: ${{ steps.tflint.outputs.exitcode }}
            

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./infrastructure

      - name: Comment Terraform Format Results
        uses: GetTerminus/terraform-pr-commenter@v1
        if: failure() && steps.fmt.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        with:
          commenter_type: "fmt"
          commenter_input: ${{ steps.fmt.outputs.stdout }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./infrastructure

      - name: Comment Terraform Validate Results
        uses: GetTerminus/terraform-pr-commenter@v1
        if: failure() && steps.validate.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        with:
          commenter_type: "validate"
          commenter_input: ${{ steps.validate.outputs.stdout }}
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

      - name: Block PR if any checks failed
        if: failure()
        run: |
          echo "::error::Critical issues found in Terraform code. Please fix the above issues before merging."
          exit 1

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Check using tfsec and comment Results on PR
        id: tfsec
        uses: tfsec/tfsec-pr-commenter-action@v1.3.1
        with:
          github_token: ${{ secrets.PAT_GITHUB }}
          working_directory: ./infrastructure


      - name: Block PR if issues found
        if: failure() && steps.tfsec.outcome == 'failure'
        run: |
          echo "::error::Security issues found in Terraform code. Please fix critical and high severity issues before merging."
          exit 1
  plan:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure

      - name: Comment Terraform Plan Results
        uses: GetTerminus/terraform-pr-commenter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        with:
          commenter_type: "plan"
          commenter_input: ${{ steps.plan.outputs.stdout }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}