name: Deploy
on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        type: choice
        options:
          - release
          - build
      artifact_version:
        description: 'Artifact version (e.g., v1.2.3 )'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Debug Inputs
        run: |
          echo "artifact_version: ${{ github.event.inputs.artifact_version }}"
          echo "Expected file: infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip"
          echo "deploy_type: ${{ github.event.inputs.deploy_type }}"
          echo "run_id: ${{ github.event.inputs.run_id }}"

      - name: Download Artifact from Build by Name
        if: github.event.inputs.deploy_type == 'build'
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ARTIFACT_NAME: infrastructure-artifact-${{ github.event.inputs.artifact_version }}
        run: |
          echo "Looking for artifact named: $ARTIFACT_NAME"

          # Fetch all artifacts
          response=$(curl -s -H "Authorization: Bearer $TOKEN" \
                          -H "Accept: application/vnd.github+json" \
                          https://api.github.com/repos/$REPO/actions/artifacts)

          # Get the matching artifact ID
          artifact_id=$(echo "$response" | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name == $NAME) | .id')

          if [[ -z "$artifact_id" ]]; then
            echo "❌ Artifact with name $ARTIFACT_NAME not found!"
            exit 1
          fi

          echo "✅ Found artifact ID: $artifact_id"
          mkdir -p artifacts

          # Download the artifact zip
          curl -L -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -o ./artifacts/$ARTIFACT_NAME.zip \
              https://api.github.com/repos/$REPO/actions/artifacts/$artifact_id/zip


      - name: Download artifact from GitHub Release
        if: github.event.inputs.deploy_type == 'release'
        env:
          TAG: ${{ github.event.inputs.artifact_version }}
          FILE: infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url="https://github.com/$REPO/releases/download/$TAG/$FILE"

          echo "Checking asset URL: $url"
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")

          if [[ "$status_code" != "200" ]]; then
            echo "❌ Asset not found at $url (HTTP $status_code)"
            exit 1
          fi

          mkdir -p artifacts
          curl -L -o "./artifacts/$FILE" "$url"



      - name: Extract Zip File
        run: |
          unzip -o ./artifacts/infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip -d .
        working-directory: .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure