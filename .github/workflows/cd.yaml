name: Deploy
on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        type: choice
        options:
          - release
          - build
      artifact_version:
        description: 'Artifact version (e.g., v1.0.2 for release, or v1.0.6+dev+41e236 for build)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: read  # Required for accessing workflow run artifacts
    steps:
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Debug Build Inputs
        if: github.event.inputs.deploy_type == 'build'
        run: |
          echo "Deploy Type: ${{ github.event.inputs.deploy_type }}"
          echo "Artifact Version: ${{ github.event.inputs.artifact_version }}"
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/workflows/ci.yaml/runs | jq -r '.workflow_runs[] | select(.status == "completed") | .id'

      - name: Download Artifact from Build
        if: github.event.inputs.deploy_type == 'build'
        run: |
          # Find the most recent completed ci.yaml run with the specified artifact
          RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/ci.yaml/runs | jq -r '.workflow_runs[] | select(.status == "completed") | .id' | head -n 1)
          if [ -z "$RUN_ID" ]; then
            echo "Error: No completed ci.yaml workflow runs found"
            exit 1
          fi
          ARTIFACT_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts | jq -r '.artifacts[] | select(.name == "infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip") | .id')
          if [ -z "$ARTIFACT_ID" ]; then
            echo "Error: Artifact infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip not found in run $RUN_ID"
            exit 1
          fi
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
            -o ./artifacts/infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip

      - name: Debug Release Inputs
        if: github.event.inputs.deploy_type == 'release'
        run: |
          echo "Deploy Type: ${{ github.event.inputs.deploy_type }}"
          echo "Artifact Version: ${{ github.event.inputs.artifact_version }}"
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases

      - name: Download Artifact from Release
        if: github.event.inputs.deploy_type == 'release'
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.artifact_version }} | jq -r '.id')
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Error: Release ${{ github.event.inputs.artifact_version }} not found"
            exit 1
          fi
          ASSET_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets | jq -r '.[] | select(.name == "infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip") | .id')
          if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" = "null" ]; then
            echo "Error: Asset infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip not found"
            exit 1
          fi
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID \
            -o ./artifacts/infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip

      - name: Extract Zip File
        run: |
          unzip -o ./artifacts/infrastructure-artifact-${{ github.event.inputs.artifact_version }}.zip -d .
        working-directory: .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure